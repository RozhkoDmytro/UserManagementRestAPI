// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/vote_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/jkozhemiaka/web-layout/internal/models"
)

// MockVoteRepoInterface is a mock of VoteRepoInterface interface.
type MockVoteRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVoteRepoInterfaceMockRecorder
}

// MockVoteRepoInterfaceMockRecorder is the mock recorder for MockVoteRepoInterface.
type MockVoteRepoInterfaceMockRecorder struct {
	mock *MockVoteRepoInterface
}

// NewMockVoteRepoInterface creates a new mock instance.
func NewMockVoteRepoInterface(ctrl *gomock.Controller) *MockVoteRepoInterface {
	mock := &MockVoteRepoInterface{ctrl: ctrl}
	mock.recorder = &MockVoteRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteRepoInterface) EXPECT() *MockVoteRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateVote mocks base method.
func (m *MockVoteRepoInterface) CreateVote(ctx context.Context, vote *models.Vote) (*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", ctx, vote)
	ret0, _ := ret[0].(*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockVoteRepoInterfaceMockRecorder) CreateVote(ctx, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockVoteRepoInterface)(nil).CreateVote), ctx, vote)
}

// DeleteVote mocks base method.
func (m *MockVoteRepoInterface) DeleteVote(ctx context.Context, userID, profileID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVote", ctx, userID, profileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVote indicates an expected call of DeleteVote.
func (mr *MockVoteRepoInterfaceMockRecorder) DeleteVote(ctx, userID, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVote", reflect.TypeOf((*MockVoteRepoInterface)(nil).DeleteVote), ctx, userID, profileID)
}

// GetVote mocks base method.
func (m *MockVoteRepoInterface) GetVote(ctx context.Context, userID, profileID uint) (*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVote", ctx, userID, profileID)
	ret0, _ := ret[0].(*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVote indicates an expected call of GetVote.
func (mr *MockVoteRepoInterfaceMockRecorder) GetVote(ctx, userID, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVote", reflect.TypeOf((*MockVoteRepoInterface)(nil).GetVote), ctx, userID, profileID)
}

// UpdateVote mocks base method.
func (m *MockVoteRepoInterface) UpdateVote(ctx context.Context, vote *models.Vote) (*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVote", ctx, vote)
	ret0, _ := ret[0].(*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVote indicates an expected call of UpdateVote.
func (mr *MockVoteRepoInterfaceMockRecorder) UpdateVote(ctx, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVote", reflect.TypeOf((*MockVoteRepoInterface)(nil).UpdateVote), ctx, vote)
}
